from matplotlib.pyplot import *
import scipy.stats as sst
import sys
import os
sys.path.append(os.path.abspath("/home/nisha/code/score-based-transport/bimodal"))
from oneD_nonUni import *

def KRMap1(x):
    return ((x+1)**3 - 1)/7
def KRMap2(x):
    return 4/3 - (2-x)**2/3
def KRMap_Gau_biGau(x,msrc,ssrc,m1,m2,s1,s2,w1,w2):
    spi = 1/sqrt(2*pi)
    c1, c2 = w1*spi/s1, w2*spi/s2
    cdf_biGau = lambda x: w1*sst.norm.cdf(s1*x+m1)+w2*sst.norm.cdf(s2*x+m2)
    cdf_Gau = lambda x: sst.norm.cdf(x)
    x = linspace(m1-3*s1,m2+3*s2,500)
    cdfx = cdf_biGau(x)
    z = polyfit(cdfx, x, 17)
    c = linspace(0,1,200)
    p = poly1d(z)
    fig, ax = subplots()
    ax.set_xlabel("prob", fontsize=24)
    ax.plot(cdfx, x, "o", label="cdf$^{-1}$(x)")
    ax.plot(c,p(c), "v", label="cdf$^{-1}$ fit(x)")
    ax.xaxis.set_tick_params(labelsize=24)
    ax.yaxis.set_tick_params(labelsize=24)
    ax.legend(fontsize=24,framealpha=0.1)
    ax.grid(True)
    tight_layout()


def plot_target():
    x = random.rand(100000)
    y = KRMap1(x)
    fig, ax = subplots()
    ax.hist(y, bins=500)
    ax.xaxis.set_tick_params(labelsize=24)
    ax.yaxis.set_tick_params(labelsize=24)

def plot_scores_for_diff_weights(m1,m2,s1,s2):
    x = linspace(-10,10,1024)
    q1 = bimodal_score(x,m1,m2,s1,s2,0.5,0.5)
    q2 = bimodal_score(x,m1,m2,s1,s2,0.25,0.75)
    q3 = bimodal_score(x,m1,m2,s1,s2,0.125,0.875)
    q4 = bimodal_score(x,m1,m2,s1,s2,0.0625,0.9375)
    fig, ax = subplots()
    ax.plot(x,q1,lw=2.5,label="0.5")
    ax.plot(x,q2,lw=2.5,label="0.25")
    ax.plot(x,q3,lw=2.5,label="0.125")
    ax.plot(x,q4,lw=2.5,label="0.0625")
    ax.xaxis.set_tick_params(labelsize=16)
    ax.yaxis.set_tick_params(labelsize=16)
    ax.legend(fontsize=16)
    ax.grid(True)

def plot_scores_derivs_for_diff_weights(m1,m2,s1,s2):
    x = linspace(-10,10,1024)
    q1 = bimodal_score_derivative(x,m1,m2,s1,s2,0.5,0.5)
    q2 = bimodal_score_derivative(x,m1,m2,s1,s2,0.25,0.75)
    q3 = bimodal_score_derivative(x,m1,m2,s1,s2,0.125,0.875)
    q4 = bimodal_score_derivative(x,m1,m2,s1,s2,0.0625,0.9375)
    fig, ax = subplots()
    ax.plot(x,q1,lw=2.5,label="0.5")
    ax.plot(x,q2,lw=2.5,label="0.25")
    ax.plot(x,q3,lw=2.5,label="0.125")
    ax.plot(x,q4,lw=2.5,label="0.0625")
    ax.xaxis.set_tick_params(labelsize=16)
    ax.yaxis.set_tick_params(labelsize=16)
    ax.legend(fontsize=16)
    ax.grid(True)



def test_kam_newton_unbounded(k,msrc,ssrc,m1,m2,s1,s2,w1,w2):
    n_gr,n = 4096*2,1000000
    x = msrc+ssrc*random.randn(n)
    tar_sc = lambda x: bimodal_score(x,m1,m2,s1,s2,w1,w2)
    dtar_sc = lambda x: bimodal_score_derivative(x,m1,m2,s1,s2,w1,w2)
    src_sc = lambda x: gaussian_score(x,msrc,ssrc)
    Tx, x_gr, v_gr, p_gr, q_gr, normv = kam_newton(x,m1-8*s1,m2+8*s2,k,n_gr,n,tar_sc,dtar_sc,src_sc)
    Tx_gr = linspace(min(Tx), max(Tx), n_gr)
    px_tar = bimodal_prob(Tx_gr,m1,m2,s1,s2,w1,w2) 
    fig, ax = subplots()
    ax.set_xlabel("x", fontsize=24)
    ax.plot(x_gr, v_gr, "o", label="v")
    ax.xaxis.set_tick_params(labelsize=24)
    ax.yaxis.set_tick_params(labelsize=24)
    ax.legend(fontsize=24,framealpha=0.1)
    ax.set_title("After {} iteration(s)".format(k),fontsize=24)
    ax.grid(True)
    tight_layout()
    ax.yaxis.offsetText.set_fontsize(24)
    savefig("../plots/v$k-ub.png")
    
    fig, ax = subplots()
    ax.set_xlabel("x", fontsize=24)
    ax.xaxis.set_tick_params(labelsize=24)
    ax.yaxis.set_tick_params(labelsize=24)
    ax.hist(Tx,bins=100,lw=3.0,histtype="step",density=True,label=R"KAM $\nu $")
    ax.plot(Tx_gr,px_tar,lw=3.0,label=R"$\nu $")
    ax.set_title("After {} iteration(s)".format(k),fontsize=24)
    ax.grid(True)
    ax.legend(fontsize=20,framealpha=0.1)
    tight_layout()
    savefig("../plots/hist-k$k-ub.png")	

    fig, ax = subplots()
    ax.set_xlabel("x", fontsize=24)
    ax.plot(x_gr, p_gr, "v", ms=6.0, label="KAM score")
    ax.plot(x_gr, q_gr, "o", ms=3.0, label="tar score")
    ax.xaxis.set_tick_params(labelsize=24)
    ax.yaxis.set_tick_params(labelsize=24)
    ax.legend(fontsize=20,markerscale=3,framealpha=0.1)
    ax.grid(True)
    ax.set_title("After {} iteration(s)".format(k),fontsize=24)
    tight_layout()
    savefig("../plots/scores-k{}-ub.png".format(k))	
 
    fig, ax = subplots()
    ax.plot(x, Tx, "o", label="KAM T(x)")
    ax.plot(x, x, "v", label="x")
    ax.xaxis.set_tick_params(labelsize=24)
    ax.yaxis.set_tick_params(labelsize=24)
    ax.legend(fontsize=20,markerscale=3,framealpha=0.1)
    ax.grid(True)
    ax.set_xlabel("x", fontsize=24)
    ax.set_ylabel("T(x)", fontsize=24)
    ax.set_title("After {} iteration(s)".format(k),fontsize=24)
    tight_layout()
    savefig("../plots/transport-k{}-ub.png".format(k))

    
def test_kam_newton_bounded():
    k,n_gr,n = 2,1024,50000
    x1,x2 = random.rand(n),random.rand(n)
    Tx1, x_gr1, v_gr1, p_gr1, q_gr1, normv1 = kam_newton(x1,0,1,k,n_gr,n,q1,dq1,uni_sc)
    Tx2, x_gr2, v_gr2, p_gr2, q_gr2, normv2 = kam_newton(x2,0,1,k,n_gr,n,q2,dq2,uni_sc)
    x_source = random.rand(n)
    x_tar1 = KRMap1(x_source)
    x_tar2 = KRMap2(x_source)

    fig, ax = subplots()
    ax.set_xlabel("x", fontsize=24)
    ax.plot(x_gr1, v_gr1, "P", label="v1")
    ax.plot(x_gr2, v_gr2, "o", label="v2")
    ax.xaxis.set_tick_params(labelsize=24)
    ax.yaxis.set_tick_params(labelsize=24)
    ax.legend(fontsize=24,framealpha=0.1)
    ax.set_title("After {} iteration(s)".format(k),fontsize=24)
    ax.grid(True)
    tight_layout()
    ax.yaxis.offsetText.set_fontsize(24)
    savefig("../plots/v$k-py.png")

    fig, ax = subplots()
    ax.set_xlabel("x", fontsize=24)
    ax.xaxis.set_tick_params(labelsize=24)
    ax.yaxis.set_tick_params(labelsize=24)
    #ax.hist(x,bins=75,lw=3.0,histtype="step",density=True,label="source")
    ax.hist(Tx1,bins=75,lw=3.0,histtype="step",density=True,label=R"KAM $\nu 1$")
    ax.hist(Tx2,bins=75,lw=3.0,histtype="step",density=True,label=R"KAM $\nu 2$")
    ax.hist(x_tar1,bins=75,lw=3.0,histtype="step",density=True,label=R"$\nu 1$")
    ax.hist(x_tar2,bins=75,lw=3.0,histtype="step",density=True,label=R"$\nu 2$")
    ax.set_title("After {} iteration(s)".format(k),fontsize=24)
    ax.grid(True)
    ax.legend(fontsize=20,framealpha=0.1)
    tight_layout()
    savefig("../plots/hist-k$k-py.png")	
	
    fig, ax = subplots()
    ax.set_xlabel("x", fontsize=24)
    ax.plot(x_gr1, p_gr1, "v", ms=6.0, label="KAM score 1")
    ax.plot(x_gr2, q_gr1, "o", ms=3.0, label="tar score 1")
    ax.plot(x_gr2, p_gr2, "v", ms=6.0, label="KAM score 2")
    ax.plot(x_gr2, q_gr2, "o", ms=3.0, label="tar score 2")
    ax.xaxis.set_tick_params(labelsize=24)
    ax.yaxis.set_tick_params(labelsize=24)
    ax.legend(fontsize=20,markerscale=3,framealpha=0.1)
    ax.grid(True)
    ax.set_title("After {} iteration(s)".format(k),fontsize=24)
    tight_layout()
    savefig("../plots/scores-k{}-py.png".format(k))	
    
    fig, ax = subplots()
    ax.plot(x1, Tx1, "o", label="KAM T1")
    ax.plot(x1, KRMap1(x1), "v",ms=3, label="KR T1")
    ax.xaxis.set_tick_params(labelsize=24)
    ax.plot(x2, Tx2, "o", label="KAM T2")
    ax.plot(x2, KRMap2(x2), "v", ms=3,label="KR T2")
    ax.yaxis.set_tick_params(labelsize=24)
    ax.legend(fontsize=20,markerscale=3,framealpha=0.1)
    ax.grid(True)
    ax.set_xlabel("x", fontsize=24)
    ax.set_ylabel("T(x)", fontsize=24)
    ax.set_title("After {} iteration(s)".format(k),fontsize=24)
    tight_layout()
    savefig("../plots/transport-k{}-py.png".format(k))
    
    fig, ax = subplots()
    ax.plot(range(1,k+1),normv1,"P--",label="||v1||")
    ax.plot(range(1,k+1),normv2,"o--",label="||v2||")
    ax.xaxis.set_tick_params(labelsize=24)
    ax.yaxis.set_tick_params(labelsize=24)
    ax.legend(fontsize=24)
    ax.set_xlabel("KAM-Newton iteration number",fontsize=24)
    ax.grid(True)
    tight_layout()
    savefig("../plots/normv-k{}-py.png".format(k))	
    
	    
